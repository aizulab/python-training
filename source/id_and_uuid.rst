==========
ID と UUID
==========

ID（識別子）
============

たとえば、ある SNS において名前が全く等しい２人のユーザーがいたとする。
これらのユーザーは「同じ」だろうか？

これらのユーザーを登録したのは同姓同名の別人かもしれないし、
あえて他人の名前を騙っているのかもしれない。

通常システム上でユーザーを管理する場合、一人一人のユーザーを区別するために
何らかの *ID (識別子, Identifier)* を付与する。

ユーザーに限らず、商品や席の予約、注文など、一つ一つを区別したいものは ID によって管理することができる。

ID はそれぞれ区別できる、つまり比較可能でユニーク（一意）である必要がある。
例えば、連番（シリアル番号）や、重複しないランダムな文字列などは、
比較可能でユニークであるため ID として使用できる。

データベースを用いた連番生成（採番）
====================================

連番を生成するのは意外と難しい。

例えば、新規ユーザーを作成するタイミングでユーザーに連番 ID を振るとする。
この場合、例えば今までのユーザーのうち最も ID が大きいユーザーの ID に
1 を足して新しい ID とすればよさそうだ。

しかし、全く同じタイミングで新規ユーザーが作成された場合はどうなるだろうか。
一定規模以上のシステムでは、処理が同時に走る可能性も当然想定しておかなければならない。

データベースの中には採番機能を持つものがあり（MySQL など）、新しいデータが挿入されると
重複しないように番号を振ってくれる。

また、採番機能がなかったとしても、データベースが１度に１人しかアクセスできないようにするような
ロック機構を持っていれば、重複しないように連番を生成することができるだろう。

この手法の欠点としては、データベースがないと採番しにくいこと、
１度に１人ずつしか番号を振れないので採番に時間がかかる可能性があること、
連番のため他のユーザーの ID が簡単にわかってしまうなどが挙げられる。

UUID
====

*UUID (Universally Unique IDentifier)* は RFC4122_ で定義されているユニークな ID である。
*GUID (Globally Unique IDentifier)* と呼ばれることもある。

.. _RFC4122: https://datatracker.ietf.org/doc/html/rfc4122

UUID は 16 進数で 32 桁（128 ビット）の値で、通常以下のようにハイフン区切りで表される。

.. code-block:: text

   1962a045-2ad8-44d0-94f1-d59dedc22c57

UUID は、衝突（重複）しないように生成することができるように設計されている。

UUID にはいくつかのバージョン（バージョン１〜５）があり、バージョンによって
時刻を用いたり、乱数を用いたりして生成される。

.. warning:: 

   もちろん、コンピュータ上で *完全にランダム* な数値を作成することは
   （外部の物理現象を観測するなどしない限り）できない。
   そのため完全にランダムではない *疑似乱数* を用いることも多いが、
   疑似乱数の生成方法によっては常に同じような乱数が生成されてしまったり、
   次に生成される乱数が簡単に予測できてしまうことがある。

   UUID のバージョン４は実際に乱数により生成されるが、
   正しい方法で生成すれば衝突する確率が極めて低くなるように設計されている。

   逆に言えば、生成方法に誤りがある場合、
   衝突しやすい ID が生成されてしまう可能性もあるということである。

UUID の欠点としては、バージョン４などでは生成した ID から生成した順番が判別できないことや、
データベースによってはキーを UUID にすることでパフォーマンスが落ちる可能性があることなどが挙げられる。

Python で UUID を生成する
=========================

Python の場合、`uuid 標準モジュール`_ で UUID を生成することができる。

.. _`uuid 標準モジュール`: https://docs.python.org/ja/3/library/uuid.html

ここではバージョン４の UUID を生成してみよう。
バージョン４の UUID は乱数によって生成されるランダムな UUID であり、ID としてよく用いられる。

``uuid4()`` 関数を使用することでランダムなバージョン４の UUID を生成できる。
REPL で実行してみよう。

.. code-block:: python3

   >>> from uuid import uuid4
   >>> uuid4()
   UUID('c92b2a2d-9c4a-42e9-8d6a-a2b6901dc66f')
   >>> uuid4()
   UUID('cddf7c60-18bd-47f2-9309-c0ff65b5bff8')

``uuid4()`` 関数を実行するたびに異なる UUID が生成されるはずだ。

UUID は ``UUID`` というクラスのインスタンスとして生成されるが、
``str()`` 組み込み関数を利用することで単なる文字列に変換できる。

.. code-block:: python3

   >>> str(uuid4())
   '2711d886-bc78-4175-ab88-71c0ab3a996d'

練習問題
========

1. ``User`` クラスに ``user_id`` 属性（文字列）を追加せよ。
   ``user_id`` 属性は、コンストラクタ内で UUID バージョン４の値（を文字列にしたもの）で初期化せよ。
2. ``User`` クラスのインスタンスを作成するたびに、異なる ``user_id`` 属性が設定されることを確認せよ。
3. データベースの自動採番機能（例えば MySQL の AUTO_INCREMENT）等を用いて ID を生成する場合、
   新しいデータをデータベースに保存するときに初めて ID が振られるため、
   コンストラクタで ID を初期化するといったことができない。
   このような場合どうすればよいか考えよ。
